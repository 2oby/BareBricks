{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar dummyArtworkData = {\n  artworkImage: '../assets/SittingMan.png',\n  title: \"Sitting Man\",\n  description: \"The sitting man is sitting. This demonstrates the importance of sitting as a commentary on sitting.\",\n  price: \"€2,400\",\n  btcPrice: \"0.15 BTC\"\n};\nexport function fetchArtworkData(_x) {\n  return _fetchArtworkData.apply(this, arguments);\n}\nfunction _fetchArtworkData() {\n  _fetchArtworkData = _asyncToGenerator(function* (artworkKey) {\n    yield new Promise(function (resolve) {\n      return setTimeout(resolve, 1000);\n    });\n    return Promise.resolve(_objectSpread(_objectSpread({}, dummyArtworkData), {}, {\n      key: artworkKey\n    }));\n  });\n  return _fetchArtworkData.apply(this, arguments);\n}","map":{"version":3,"names":["dummyArtworkData","artworkImage","title","description","price","btcPrice","fetchArtworkData","_x","_fetchArtworkData","apply","arguments","_asyncToGenerator","artworkKey","Promise","resolve","setTimeout","_objectSpread","key"],"sources":["/Users/2oby/pCloud Box/Projects/WytWallz/Git Repo/WytWallz/src/services/api.js"],"sourcesContent":["// Dummy data for simulation purposes\nconst dummyArtworkData = {\n  artworkImage: '../assets/SittingMan.png',\n  title: \"Sitting Man\",\n  description: \"The sitting man is sitting. This demonstrates the importance of sitting as a commentary on sitting.\",\n  price: \"€2,400\",\n  btcPrice: \"0.15 BTC\"\n};\n\n/**\n * Fetches artwork data based on a provided key.\n * Simulates fetching data from an API.\n * @param {string} artworkKey - The unique key for the artwork.\n * @returns {Promise<Object>} The artwork data.\n */\nexport async function fetchArtworkData(artworkKey) {\n  // Simulate a network delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Return the dummy data\n  return Promise.resolve({ ...dummyArtworkData, key: artworkKey });\n\n  // Uncomment below when ready to fetch from a real API\n  /*\n  try {\n    // Replace this URL with the actual endpoint of your online service\n    const response = await fetch(`https://yourapi.com/artworks/${artworkKey}`);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching artwork data:', error);\n    throw error; // Re-throw the error for handling in the calling component\n  }\n  */\n}"],"mappings":";;;;AACA,IAAMA,gBAAgB,GAAG;EACvBC,YAAY,EAAE,0BAA0B;EACxCC,KAAK,EAAE,aAAa;EACpBC,WAAW,EAAE,qGAAqG;EAClHC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE;AACZ,CAAC;AAQD,gBAAsBC,gBAAgBA,CAAAC,EAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAuBrC,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,iBAAA,CAvBM,WAAgCC,UAAU,EAAE;IAEjD,MAAM,IAAIC,OAAO,CAAC,UAAAC,OAAO;MAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC;IAAA,EAAC;IAGvD,OAAOD,OAAO,CAACC,OAAO,CAAAE,aAAA,CAAAA,aAAA,KAAMhB,gBAAgB;MAAEiB,GAAG,EAAEL;IAAU,EAAE,CAAC;EAkBlE,CAAC;EAAA,OAAAJ,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}